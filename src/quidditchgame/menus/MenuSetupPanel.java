package quidditchgame.menus;

import java.awt.Graphics;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import quidditchgame.Game;
import quidditchgame.Team;

/**
 * Class MenuSetupPanel.
 * Setup options for the game. Should be displayed before starting a new game.
 *
 * @author  Jimmy Yuan,  Ben Han
 */
public class MenuSetupPanel extends javax.swing.JPanel {

    private Menu parent;
    private final long MINUTE = 60;
    /* Keeps track of the last item selected in each color list. Reverts to it 
     * if the newly selected color is the same as the other team, thus avoiding
     * both teams being the same color. */
    private String teamOneColorLastSelected = "Red";
    private String teamTwoColorLastSelected = "Green";
    
    /**
     * Creates new form SetupPanel
     *
     * @param m parent Menu object that handles events
     */
    public MenuSetupPanel(Menu m) {
        parent = m;
        initComponents();
        teamTwoColor.setSelectedIndex(1);
    }

    /**
     * function to return the team1 with the right color
     * 
     * @return team1 with the right color
     */
    public Team getTeam1() {
        return new Team(teamOneNameField.getText(), getTeamColorFromString((String)teamOneColor.getSelectedItem()), Team.side.LEFT);
    }
    
    /**
     * function to return the team2 with the right color
     *
     * @return team2 with the right color
     */
    public Team getTeam2() {
        return new Team(teamTwoNameField.getText(), getTeamColorFromString((String)teamTwoColor.getSelectedItem()), Team.side.RIGHT);
    }


    /**
     * function to return the Playable Character selected by the user
     * @return PlayableCharacter
     */
    public Game.PlayableCharacter getPlayableCharacter() {
        String characterType = (String)playerPosition.getSelectedItem();
        if (characterType.equals("Beater")) {
            return Game.PlayableCharacter.BEATER;
        } else if (characterType.equals("Seeker")) {
            return Game.PlayableCharacter.SEEKER;
        } else if (characterType.equals("Keeper")) {
            return Game.PlayableCharacter.KEEPER;
        } else { //"Chaser"
            return Game.PlayableCharacter.CHASER;
        }
    }

    /**
     * function to return the game time selected by the user
     * @return gametime
     */
    public long getGameTime() {
        String time = (String)gameTime.getSelectedItem();
        if (time.equals("0 Minutes")) {
            // 10 sec game for testing purposes
            return 10;
        }
        else if (time.equals("1 Minute")) {
            return MINUTE;
        } else if (time.equals("3 Minutes")) {
            return 3 * MINUTE;
        } else if (time.equals("5 Minutes")) {
            return 5 * MINUTE;
        } else if (time.equals("10 Minutes")) {
            return 10 * MINUTE;
        } else {
            return 30 * MINUTE;
        }
    }


    /**
     * function to return snitch score value selected by the user
     * @return snitch score value
     */
    public int getSnitchScoreValue() {
        String snitch = (String)snitchScoreValue.getSelectedItem();
        if (snitch.equals("150 Points")) {
            return 150;
        } else if (snitch.equals("100 Points")) {
            return 100;
        } else if (snitch.equals("50 Points")) {
            return 50;
        } else {
            return 30;
        }
    }


    /**
     * function to translate user selection to actual color variable
     * @return team color
     */
    private Team.color getTeamColorFromString(String color) {
        if (color.equals("Red")) {
            return Team.color.red;
        } else if (color.equals("Blue")) {
            return Team.color.blue;
        } else if (color.equals("Green")) {
            return Team.color.green;
        } else {
            return Team.color.yellow;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        teamOnePanel = new javax.swing.JPanel();
        teamOneText = new javax.swing.JLabel();
        teamOneNameField = new javax.swing.JTextField();
        teamOneColorText = new javax.swing.JLabel();
        teamOneColor = new javax.swing.JComboBox();
        teamOnePositionText = new javax.swing.JLabel();
        playerPosition = new javax.swing.JComboBox();
        gameTimeText = new javax.swing.JLabel();
        gameTime = new javax.swing.JComboBox();
        snitchScoreValueText = new javax.swing.JLabel();
        snitchScoreValue = new javax.swing.JComboBox();
        teamTwoPanel = new javax.swing.JPanel();
        teamTwoText = new javax.swing.JLabel();
        teamTwoNameField = new javax.swing.JTextField();
        teamTwoColorText = new javax.swing.JLabel();
        teamTwoColor = new javax.swing.JComboBox();
        mainMenuButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(254, 254, 254));
        setMaximumSize(new java.awt.Dimension(1000, 630));
        setMinimumSize(new java.awt.Dimension(1000, 630));

        teamOnePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        teamOneText.setFont(new java.awt.Font("Tahoma", 0, 36));
        teamOneText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        teamOneText.setText("Player");

        teamOneNameField.setFont(new java.awt.Font("Cantarell", 0, 18)); // NOI18N
        teamOneNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        teamOneNameField.setText("Gryffindor");

        teamOneColorText.setFont(new java.awt.Font("Tahoma", 0, 24));
        teamOneColorText.setText("Team Colour:");

        teamOneColor.setFont(new java.awt.Font("Tahoma", 0, 24));
        teamOneColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Blue", "Red", "Yellow", "Green" }));
        teamOneColor.setSelectedIndex(1);
        teamOneColor.setRenderer(new CustomListCellRenderer());
        teamOneColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamOneColorActionPerformed(evt);
            }
        });

        teamOnePositionText.setFont(new java.awt.Font("Tahoma", 0, 24));
        teamOnePositionText.setText("Player Position:");

        playerPosition.setFont(new java.awt.Font("Tahoma", 0, 24));
        playerPosition.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chaser", "Beater", "Seeker", "Keeper" }));

        gameTimeText.setFont(new java.awt.Font("Tahoma", 0, 24));
        gameTimeText.setText("Game Time:");

        gameTime.setFont(new java.awt.Font("Tahoma", 0, 24));
        gameTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 Minute", "3 Minutes", "5 Minutes", "10 Minutes", "20 Minutes" }));
        gameTime.setSelectedIndex(2);
        gameTime.setToolTipText("");

        snitchScoreValueText.setFont(new java.awt.Font("Tahoma", 0, 24));
        snitchScoreValueText.setText("Snitch Score Value:");

        snitchScoreValue.setFont(new java.awt.Font("Tahoma", 0, 24));
        snitchScoreValue.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "150 Points", "100 Points", "50 Points", "30 Points" }));
        snitchScoreValue.setSelectedIndex(2);
        snitchScoreValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                snitchScoreValueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teamOnePanelLayout = new javax.swing.GroupLayout(teamOnePanel);
        teamOnePanel.setLayout(teamOnePanelLayout);
        teamOnePanelLayout.setHorizontalGroup(
            teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamOnePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamOneNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addComponent(teamOneText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teamOnePanelLayout.createSequentialGroup()
                        .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teamOnePositionText)
                            .addComponent(teamOneColorText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 181, Short.MAX_VALUE)
                        .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(teamOneColor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerPosition, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(gameTime, 0, 159, Short.MAX_VALUE)))))
            .addGroup(teamOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teamOnePanelLayout.createSequentialGroup()
                        .addComponent(gameTimeText)
                        .addContainerGap(374, Short.MAX_VALUE))
                    .addGroup(teamOnePanelLayout.createSequentialGroup()
                        .addComponent(snitchScoreValueText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                        .addComponent(snitchScoreValue, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        teamOnePanelLayout.setVerticalGroup(
            teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teamOneText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamOneNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamOneColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamOneColorText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamOnePositionText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gameTimeText)
                    .addComponent(gameTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(snitchScoreValueText)
                    .addComponent(snitchScoreValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        teamTwoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        teamTwoText.setFont(new java.awt.Font("Tahoma", 0, 36));
        teamTwoText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        teamTwoText.setText("Computer");

        teamTwoNameField.setFont(new java.awt.Font("Cantarell", 0, 18));
        teamTwoNameField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        teamTwoNameField.setText("Slytherin");

        teamTwoColorText.setFont(new java.awt.Font("Tahoma", 0, 24));
        teamTwoColorText.setText("Team Colour:");

        teamTwoColor.setFont(new java.awt.Font("Tahoma", 0, 24));
        teamTwoColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Blue", "Red", "Yellow", "Green" }));
        teamTwoColor.setSelectedIndex(3);
        teamTwoColor.setRenderer(new CustomListCellRenderer());
        teamTwoColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamTwoColorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout teamTwoPanelLayout = new javax.swing.GroupLayout(teamTwoPanel);
        teamTwoPanel.setLayout(teamTwoPanelLayout);
        teamTwoPanelLayout.setHorizontalGroup(
            teamTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamTwoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teamTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamTwoText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                    .addComponent(teamTwoNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teamTwoPanelLayout.createSequentialGroup()
                        .addComponent(teamTwoColorText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, Short.MAX_VALUE)
                        .addComponent(teamTwoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        teamTwoPanelLayout.setVerticalGroup(
            teamTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamTwoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teamTwoText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamTwoNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(teamTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamTwoColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamTwoColorText))
                .addContainerGap(257, Short.MAX_VALUE))
        );

        mainMenuButton.setFont(new java.awt.Font("Tahoma", 0, 24));
        mainMenuButton.setText("Return to Main Menu");
        mainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonActionPerformed(evt);
            }
        });

        startButton.setFont(new java.awt.Font("Tahoma", 0, 24));
        startButton.setText("Start Game");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(teamOnePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamTwoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mainMenuButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 619, Short.MAX_VALUE)
                        .addComponent(startButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(142, 142, 142)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(teamOnePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teamTwoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(mainMenuButton))
                .addContainerGap(168, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event handler for editing text in the Team Two name text field.
     * @param evt Text field event
     */
    private void teamTwoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamTwoColorActionPerformed
        JComboBox comboBox = (JComboBox)evt.getSource();
        String item = (String)comboBox.getSelectedItem();
        if(item == teamOneColor.getSelectedItem ()) {
            comboBox.setSelectedItem (teamTwoColorLastSelected);
        } else {
            teamTwoColorLastSelected = item;
        }
    }//GEN-LAST:event_teamTwoColorActionPerformed

    /**
     * Event handler for "Return to Main Menu" button clicks.
     * @param evt Button event
     */
    private void mainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuButtonActionPerformed
        parent.mainMenu();
    }//GEN-LAST:event_mainMenuButtonActionPerformed

    /**
     * Event handler for "Start Game" button clicks.
     * @param evt Button event
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        parent.startGame();
    }//GEN-LAST:event_startButtonActionPerformed

    private void teamOneColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamOneColorActionPerformed
        JComboBox comboBox = (JComboBox)evt.getSource();
        String item = (String)comboBox.getSelectedItem();
        if(item == teamTwoColor.getSelectedItem ()) {
            comboBox.setSelectedItem (teamOneColorLastSelected);
        } else {
            teamOneColorLastSelected = item;
        }
}//GEN-LAST:event_teamOneColorActionPerformed

    /**
     * Event handler for the snitch score control
     * @param evt Dropbox event
     */
    private void snitchScoreValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_snitchScoreValueActionPerformed
        
    }//GEN-LAST:event_snitchScoreValueActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox gameTime;
    private javax.swing.JLabel gameTimeText;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JComboBox playerPosition;
    private javax.swing.JComboBox snitchScoreValue;
    private javax.swing.JLabel snitchScoreValueText;
    private javax.swing.JButton startButton;
    private javax.swing.JComboBox teamOneColor;
    private javax.swing.JLabel teamOneColorText;
    private javax.swing.JTextField teamOneNameField;
    private javax.swing.JPanel teamOnePanel;
    private javax.swing.JLabel teamOnePositionText;
    private javax.swing.JLabel teamOneText;
    private javax.swing.JComboBox teamTwoColor;
    private javax.swing.JLabel teamTwoColorText;
    private javax.swing.JTextField teamTwoNameField;
    private javax.swing.JPanel teamTwoPanel;
    private javax.swing.JLabel teamTwoText;
    // End of variables declaration//GEN-END:variables

    /**
     * draws the background image
     * @param g Graphics object to draw with
     */
    @Override
    public void paintComponent(Graphics g )
    {
        super.paintComponent( g );
        // draws the background image
        Image bgImage1 = new ImageIcon("./assets/gameSetup.png").getImage();
        g.drawImage(bgImage1, 0, 0, null); 
    }
     
    class CustomListCellRenderer extends javax.swing.JLabel implements javax.swing.ListCellRenderer {  
        @Override
        public java.awt.Component getListCellRendererComponent(javax.swing.JList list,  
                                                      Object value,  
                                                      int index,  
                                                      boolean isSelected,  
                                                      boolean cellHasFocus) {  
            // set this cell to enabled(false);  
            setText(value.toString());
            if(teamOneColor.getRenderer () == this) {
                if(index == teamTwoColor.getSelectedIndex ()) {
                    setEnabled(false);
                    setFocusable(false);
                } else {
                    setEnabled(true);
                    setFocusable(true);
                }
            }
            
            if(teamTwoColor.getRenderer () == this) {
                if(index == teamOneColor.getSelectedIndex ()) {
                    setEnabled(false);
                    setFocusable(false);
                } else {
                    setEnabled(true);
                    setFocusable(true);
                }
            }
            
            return this;
        }  
    }
}
